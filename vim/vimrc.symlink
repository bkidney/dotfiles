set nocompatible

filetype off

" Clear autocmd
autocmd!

" Load pathogen for plugin management
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()
Helptags

set noswapfile

filetype on
filetype plugin indent on

" ----------------------------------------------------------------------------
"  Theme 
" ----------------------------------------------------------------------------
set t_Co=256
colorscheme molokai 

" ----------------------------------------------------------------------------
"  My shortcuts 
" ----------------------------------------------------------------------------

" lead with ,
let mapleader = ","

" Use only ! to run command 
nnoremap ! :! 

" Toggle wrap lines and do so on whitespace
map <leader>w :set <C-R>=eval('&wrap') ? 'nowrap' : 'tw=0 wrap linebreak'<CR><CR>   

" clear the command line and search highlighting
noremap <C-l> :nohlsearch<CR>

" toggle spell check with <F5>
map <F5> :setlocal spell! spelllang=en_us<cr>
imap <F5> <ESC>:setlocal spell! spelllang=en_us<cr>

function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set ruler                  " show the cursor position all the time
set number                 " line numbers
set scrolloff=4            " minimum 2 lines above/below cursor
set incsearch              " do incremental searching
set showmatch              " brackets/braces that is
set laststatus=2           " always show the status line
set hlsearch               " highlight searches
set cursorline             " highlight current line
set visualbell
set nowrap

"hint to keep lines short
if exists('+colorcolumn')
  set colorcolumn=80
endif

" ----------------------------------------------------------------------------
" Text Formatting
" ----------------------------------------------------------------------------

set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab


" ----------------------------------------------------------------------------
"  FileType specific settings 
" ----------------------------------------------------------------------------

" In makefiles do not expand tabs
autocmd FileType make setlocal noexpandtab

" Ruby uses 2-character indents
autocmd FileType ruby setlocal ts=2 sts=2 sw=2

" Defaults for Go
autocmd FileType go setlocal ts=8 sts=8 sw=8 noet

" zsh functions are zsh, even without extensions
autocmd BufRead,BufNewFile **/*zsh/functions/* set filetype=zsh

" ----------------------------------------------------------------------------
"  Airline Config
" ----------------------------------------------------------------------------

" Fonts for airline
if has('macunix')
  set guifont=Monaco\ for\ Powerline
endif

let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

let g:airline#extensions#default#section_truncate_width = {
      \ 'b': 79,
      \ 'x': 60,
      \ 'y': 120,
      \ 'z': 45,
      \ }

" highlight the status bar when in insert mode
"if version >= 700
"  au InsertEnter * hi StatusLine ctermfg=235 ctermbg=2
"  au InsertLeave * hi StatusLine ctermbg=240 ctermfg=12
"endif


" ---------------------------------------------------------------------------
"  Silver Searcher
" ---------------------------------------------------------------------------

" map Silver Searcher
map <leader>a :Ag!<space>

" search for word under cursor with Silver Searcher
map <leader>A :Ag! "<C-r>=expand('<cword>')<CR>"

" ---------------------------------------------------------------------------
"  CtrlP
" ---------------------------------------------------------------------------

" ctrlp config
let g:ctrlp_map = '<leader>f'
let g:ctrlp_max_height = 30
let g:ctrlp_working_path_mode = 0
let g:ctrlp_match_window_reversed = 0

" use silver searcher for ctrlp
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" ---------------------------------------------------------------------------
" Gist 
" ---------------------------------------------------------------------------

" open gist after it's been created
let g:gist_open_browser_after_post = 1


" ---------------------------------------------------------------------------
" Neocomplete
" ---------------------------------------------------------------------------

let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  "return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif

" ---------------------------------------------------------------------------
" Ultisnips Configurations
" ---------------------------------------------------------------------------

let g:UltiSnipsExpandTrigger="<S-tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" ---------------------------------------------------------------------------
" Latex Configuration
" ---------------------------------------------------------------------------
let g:tex_flavor = "latex"

" ---------------------------------------------------------------------------
" Autosave
" ---------------------------------------------------------------------------
autocmd InsertLeave,TextChanged * if expand('%') != '' | update | endif
