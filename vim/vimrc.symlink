set nocompatible
filetype off

" Clear autocmd
autocmd!

set noswapfile
set hidden

" ----------------------------------------------------------------------------
"  Plugins
" ----------------------------------------------------------------------------
call plug#begin()
Plug 'epmatsw/ag.vim'
Plug 'kien/ctrlp.vim'
Plug 'mattn/gist-vim'
Plug 'mattn/webapi-vim'
Plug 'ajh17/VimCompletesMe'
Plug 'majutsushi/tagbar'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
Plug 'altercation/vim-colors-solarized'
Plug 'tpope/vim-commentary'
Plug 'airblade/vim-gitgutter'
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-dispatch'
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'tpope/vim-git'
Plug 'mrtazz/vim-stencil'
call plug#end()

filetype on
filetype plugin indent on

" ----------------------------------------------------------------------------
"  Theme
" ----------------------------------------------------------------------------
set t_Co=256
colorscheme molokai
set t_ut= " Turns of background color erase. Fixes color issues in tmux

" ----------------------------------------------------------------------------
"  My shortcuts
" ----------------------------------------------------------------------------

" lead with ,
let mapleader = ","

" Use only ! to run command
nnoremap ! :!

" Toggle wrap lines and do so on whitespace
map <leader>w :set <C-R>=eval('&wrap') ? 'nowrap' : 'tw=0 wrap linebreak'<CR><CR>

" clear the command line and search highlighting
noremap <C-l> :nohlsearch<CR>

" toggle spell check with <F5>
map <F5> :setlocal spell! spelllang=en_us<cr>
imap <F5> <ESC>:setlocal spell! spelllang=en_us<cr>

function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>

function! Today()
    call append( line(".") - 1, strftime('%Y-%m-%d') )
endfunction
command Today call Today()


function! Yesterday()
    call append( line(".") - 1, strftime('%Y-%m-%d', localtime()-86400) )
endfunction
command Yesterday call Yesterday()

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set ruler                  " show the cursor position all the time
set number                 " line numbers
set scrolloff=4            " minimum 2 lines above/below cursor
set incsearch              " do incremental searching
set showmatch              " brackets/braces that is
set laststatus=2           " always show the status line
set hlsearch               " highlight searches
set cursorline             " highlight current line
set visualbell
set nowrap

"hint to keep lines short
if exists('+colorcolumn')
  set colorcolumn=80
endif

" ----------------------------------------------------------------------------
" Text Formatting
" ----------------------------------------------------------------------------

set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab


" ----------------------------------------------------------------------------
"  FileType specific settings
" ----------------------------------------------------------------------------

" In makefiles do not expand tabs
autocmd FileType make setlocal noexpandtab

" Ruby uses 2-character indents
autocmd FileType ruby setlocal ts=2 sts=2 sw=2

" Defaults for Go
autocmd FileType go setlocal ts=8 sts=8 sw=8 noet

" zsh functions are zsh, even without extensions
autocmd BufRead,BufNewFile **/*zsh/functions/* set filetype=zsh

" Remove quick fix from the buffer next/prev
augroup qf
    autocmd!
    autocmd FileType qf set nobuflisted
augroup END

" Turn on spell check for 'text' files
autocmd FileType tex,md,txt set spell

" Latex need a fix to ensure spell check works
autocmd FileType tex syntax spell toplevel

" ----------------------------------------------------------------------------
"  FileType specific settings
" ----------------------------------------------------------------------------

let g:StencilTemplatepath = "~/.vim/templates/"


" ----------------------------------------------------------------------------
"  Airline Config
" ----------------------------------------------------------------------------

" Fonts for airline
if has('macunix')
  set guifont=Monaco\ for\ Powerline
endif

let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

let g:airline#extensions#default#section_truncate_width = {
      \ 'b': 79,
      \ 'x': 60,
      \ 'y': 120,
      \ 'z': 45,
      \ }

let g:airline#extensions#tabline#enabled = 1

" ---------------------------------------------------------------------------
"  Silver Searcher
" ---------------------------------------------------------------------------

" map Silver Searcher
map <leader>a :Ag!<space>

" search for word under cursor with Silver Searcher
map <leader>A :Ag! "<C-r>=expand('<cword>')<CR>"

" ---------------------------------------------------------------------------
"  CtrlP
" ---------------------------------------------------------------------------

" ctrlp config
let g:ctrlp_map = '<leader>f'
let g:ctrlp_max_height = 30
let g:ctrlp_working_path_mode = 0
let g:ctrlp_match_window_reversed = 0

" use silver searcher for ctrlp
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" ---------------------------------------------------------------------------
" Gist
" ---------------------------------------------------------------------------

" open gist after it's been created
let g:gist_open_browser_after_post = 1

" ---------------------------------------------------------------------------
" Ultisnips Configurations
" ---------------------------------------------------------------------------

let g:UltiSnipsExpandTrigger="<C-CR>"
let g:UltiSnipsJumpForwardTrigger="<C-tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" ---------------------------------------------------------------------------
" Latex Configuration
" ---------------------------------------------------------------------------
let g:tex_flavor = "latex"

" ---------------------------------------------------------------------------
" Tagbar Config
" ---------------------------------------------------------------------------
nmap <F8> :TagbarToggle<CR>

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }
